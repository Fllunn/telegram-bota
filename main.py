import re
import schedule
import time
import threading
import hashlib
import os
import json
import random
import telebot
from dotenv import load_dotenv
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, ReplyKeyboardMarkup, \
    KeyboardButton
import re

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set!")

bot = telebot.TeleBot(BOT_TOKEN)

EDIT_WORD_PREFIX = "edit_word:"
SEARCH_CHANGE_PREFIX = "search_word_change:"


def generate_id(question):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
    return hashlib.md5(question.encode('utf-8')).hexdigest()[:8]


def contains_invalid_symbols(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    global allowed_symbols
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
    allowed_symbols = set(load_json("allowed_symbols.json", {}).get("allowed", ""))
    if not allowed_symbols:
        raise ValueError("–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ allowed_symbols.json")

    # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    cleaned_text = text.replace("\n", "").replace(" ", "")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    return any(char not in allowed_symbols for char in cleaned_text)


def has_excessive_repetition(text, max_repeats=10):
    text = text.replace("\n", "").replace(" ", "")
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—Ä—è–¥."""
    from itertools import groupby
    for char, group in groupby(text):
        if len(list(group)) > max_repeats:
            return True
    return False


def generate_question_hash(data):
    """–°–æ–∑–¥–∞—ë—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–Ω–µ –±–æ–ª–µ–µ 64 –±–∞–π—Ç)"""
    return hashlib.sha256(data.encode('utf-8')).hexdigest()[:16]  # –•—ç—à –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def load_json(filename, default=None):
    if os.path.exists(filename):
        try:
            with open(filename, "r", encoding="utf-8") as file:
                return json.load(file)
        except json.JSONDecodeError:
            return default or {}
    return default or {}


quiz_modes = load_json("quiz_modes.json", {})  # –†–µ–∂–∏–º—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


def generate_category_hash(category_name):
    """–°–æ–∑–¥–∞–µ—Ç —Ö—ç—à –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    return hashlib.md5(category_name.encode('utf-8')).hexdigest()[:16]


def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
user_categories = load_json("user_categories.json", {})
errors = load_json("errors.json", {})
user_context = {}
add_word_context = {}
categories_for_all_users = load_json("categories_for_all_users.json", {})
allowed_users = load_json("allowed_users.json", [])
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
allowed_symbols = set(load_json("allowed_symbols.json", {}).get("allowed", ""))


def natural_sort_key(s):
    return [
        int(text) if text.isdigit() else text.lower()
        for text in re.split(r'(\d+)', s)
    ]


@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = str(message.chat.id)

    if user_id not in user_categories:
        user_categories[user_id] = {}
        save_json("user_categories.json", user_categories)

    categories = sorted(user_categories[user_id].keys(), key=natural_sort_key)  # –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞

    if not categories:
        bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_word –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    markup = InlineKeyboardMarkup()
    for category in categories:
        markup.add(InlineKeyboardButton(category, callback_data=f"category:{category}"))

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


def show_categories(user_id):
    categories = user_categories.get(user_id, {})
    if not categories:
        bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_word –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤.")
        return
    markup = InlineKeyboardMarkup()
    for category in categories.keys():
        markup.add(InlineKeyboardButton(category, callback_data=f"category:{category}"))
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("category:"))
def select_category(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    selected_category = call.data.split(":")[1]
    # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    questions = user_categories[user_id][selected_category][:]
    for q in questions:
        q["correct_count"] = 0
    user_context[user_id] = {
        "mode": "quiz",
        "category": selected_category,
        "all_questions": questions,  # –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "current_round_questions": questions[:] if questions else [],  # –ø–µ—Ä–≤—ã–π –∫—Ä—É–≥ = –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
        "round_number": 1,  # –Ω–∞—á–∏–Ω–∞–µ–º —Å 1-–≥–æ –∫—Ä—É–≥–∞
        "session_errors": {},  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (qid: correct_answer)
        "start_time": time.time()
    }
    bot.send_message(user_id, f"–¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {selected_category}.\n–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è 1 –∫—Ä—É–≥ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
    send_quiz(user_id)


def send_quiz(user_id):
    context = user_context.get(user_id)
    if not context or context.get("mode") != "quiz":
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not context.get("all_questions"):
        bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞: –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        user_context.pop(user_id, None)
        return

    # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Å–≤–æ–µ–Ω—ã (–ø–æ 2 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–∂–¥—ã–π) ‚Äì –∑–∞–≤–µ—Ä—à–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    all_mastered = all(q.get("correct_count", 0) == 2 for q in context["all_questions"])
    if all_mastered:
        elapsed = time.time() - context["start_time"]
        elapsed_str = time.strftime("%M:%S", time.gmtime(elapsed))
        error_answers = [q["correct"] for q in context["all_questions"] if
                         generate_id(q["question"]) in context["session_errors"]]

        if error_answers:
            if len(error_answers) > 10:
                context["final_error_list"] = error_answers
                context["final_error_page"] = 0
                bot.send_message(user_id, f"üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í—Ä–µ–º—è: {elapsed_str}")
                send_final_error_page(user_id, 0)
            else:
                numbered = "\n".join([f"{i + 1}. {word}" for i, word in enumerate(error_answers)])
                bot.send_message(user_id, f"üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í—Ä–µ–º—è: {elapsed_str}\n–û—à–∏–±–∫–∏:\n{numbered}")
        else:
            bot.send_message(user_id, f"üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í—Ä–µ–º—è: {elapsed_str}\n–û—à–∏–±–æ–∫ –Ω–µ –±—ã–ª–æ.")
        user_context.pop(user_id, None)
        return

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∫—Ä—É–≥ –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
    if not context["current_round_questions"]:
        context["round_number"] += 1

        if context["round_number"] <= 2:
            new_round = context["all_questions"][:]  # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        else:
            new_round = [q for q in context["all_questions"] if q.get("correct_count", 0) < 2]  # –ù–µ–æ—Å–≤–æ–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã

        if new_round:
            random.shuffle(new_round)  # üî• –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫—Ä—É–≥
            context["current_round_questions"] = new_round
            bot.send_message(user_id, f"üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è {context['round_number']} –∫—Ä—É–≥ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
        else:
            bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞: –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫—Ä—É–≥–∞.")
            user_context.pop(user_id, None)
            return

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π (–≤–¥–æ–±–∞–≤–æ–∫ –∫ shuffle –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∫—Ä—É–≥–∞)
    random.shuffle(context["current_round_questions"])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
    if context["current_round_questions"]:
        question = context["current_round_questions"].pop(0)
        context["current"] = question

        try:
            wrong_answer, correct_answer = question["question"].split("‚Üê")
            options = [wrong_answer.strip(), correct_answer.strip()]
            random.shuffle(options)  # üî• –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–Ω–æ–ø–æ–∫

            markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for opt in options:
                markup.add(KeyboardButton(opt))

            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=markup)
        except Exception as e:
            bot.send_message(user_id, f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
            send_quiz(user_id)  # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ —ç—Ç–æ—Ç –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É
    else:
        bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞: –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤.")
        user_context.pop(user_id, None)


def send_final_error_page(user_id, page=0):
    context = user_context.get(user_id)
    if not context or "final_error_list" not in context:
        return
    error_list = context["final_error_list"]
    total_pages = (len(error_list) - 1) // 10 + 1
    start_idx = page * 10
    end_idx = start_idx + 10
    page_errors = error_list[start_idx:end_idx]
    numbered = "\n".join([f"{i + start_idx + 1}. {word}" for i, word in enumerate(page_errors)])
    message = f"–°–ª–æ–≤–∞ —Å –æ—à–∏–±–∫–∞–º–∏ (–≤–µ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã):\n{numbered}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"

    markup = InlineKeyboardMarkup()
    if page > 0:
        markup.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"final_error_prev:{page - 1}"))
    if end_idx < len(error_list):
        markup.add(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"final_error_next:{page + 1}"))
    bot.send_message(user_id, message, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("final_error_"))
def paginate_final_errors(call):
    user_id = str(call.message.chat.id)
    _, page_str = call.data.split(":", 1)
    page = int(page_str)
    try:
        bot.delete_message(user_id, call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    send_final_error_page(user_id, page)
    bot.answer_callback_query(call.id)


@bot.message_handler(func=lambda message: str(message.chat.id) in user_context and
                                          user_context[str(message.chat.id)].get("mode") == "quiz" and
                                          user_context[str(message.chat.id)].get("current"))
def handle_answer(message):
    user_id = str(message.chat.id)
    context = user_context.get(user_id)
    user_answer = message.text.strip()

    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ‚Äì –∑–∞–≤–µ—Ä—à–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    if user_answer.startswith("/"):
        user_context.pop(user_id, None)
        bot.send_message(user_id, "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞!", reply_markup=ReplyKeyboardRemove())
        bot.process_new_messages([message])
        return

    question = context["current"]
    correct_answer = question["correct"].strip()
    qid = generate_id(question["question"])
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    category = context.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    if user_answer == correct_answer:
        bot.send_message(user_id, "‚úÖ –í–µ—Ä–Ω–æ!")
        question["correct_count"] += 1
    else:
        bot.send_message(user_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}.", reply_markup=ReplyKeyboardRemove())
        question["correct_count"] = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ session_errors
        context["session_errors"][qid] = correct_answer

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ errors.json —Å —É—á—ë—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if user_id not in errors:
            errors[user_id] = {}
        if category not in errors[user_id]:
            errors[user_id][category] = {}
        if question["question"] in errors[user_id][category]:
            errors[user_id][category][question["question"]] += 1
        else:
            errors[user_id][category][question["question"]] = 1
        save_json("errors.json", errors)

    context["current"] = None
    send_quiz(user_id)


@bot.message_handler(commands=['mistakes'])
def show_errors(message):
    user_id = str(message.chat.id)
    if user_id not in errors or not errors[user_id]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫!")
        return

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
    def sort_key(category):
        match = re.search(r'‚Ññ\s*(\d+)', category)
        return int(match.group(1)) if match else float('inf')

    sorted_categories = sorted(errors[user_id].keys(), key=sort_key)

    markup = InlineKeyboardMarkup()
    for category in sorted_categories:
        markup.add(InlineKeyboardButton(category, callback_data=f"mistakes_category:{category}"))
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—à–∏–±–æ–∫:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("mistakes_category:"))
def mistakes_category_handler(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    selected_category = call.data.split(":", 1)[1]
    if user_id not in errors or selected_category not in errors[user_id]:
        bot.send_message(user_id, "–û—à–∏–±–∫–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    category_errors = sorted(errors[user_id][selected_category].items(), key=lambda x: (-x[1], x[0]))
    user_context[user_id] = {
        "mistakes_action": "view_category_mistakes",
        "mistakes_category": selected_category,
        "mistakes_list": category_errors,
        "page": 0,
        "total_pages": (len(category_errors) - 1) // 10 + 1
    }
    send_category_mistakes_page(user_id)


def send_category_mistakes_page(user_id, page=0):
    context = user_context.get(user_id)
    if not context or "mistakes_list" not in context:
        bot.send_message(user_id, "–°–µ—Å—Å–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—à–∏–±–æ–∫ —É—Å—Ç–∞—Ä–µ–ª–∞.")
        return
    mistakes_list = context["mistakes_list"]
    total_errors = len(mistakes_list)
    total_pages = (total_errors - 1) // 10 + 1
    start_idx = page * 10
    end_idx = start_idx + 10
    current_errors = mistakes_list[start_idx:end_idx]

    message_text = f"–û—à–∏–±–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{context['mistakes_category']}' (–í—Å–µ–≥–æ: {total_errors})\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
    for i, (q, count) in enumerate(current_errors, start=start_idx + 1):
        correct_part = q.split("‚Üê")[1] if "‚Üê" in q else q
        message_text += f"{i}. {correct_part} [{count}]\n"

    markup = InlineKeyboardMarkup()
    if page > 0:
        markup.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"mistakes_cat_prev:{page - 1}"))
    if end_idx < total_errors:
        markup.add(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"mistakes_cat_next:{page + 1}"))
    markup.add(InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="mistakes_cat_close"))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context["page"] = page

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å
    if "mistakes_message_id" in context:
        try:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=context["mistakes_message_id"],
                text=message_text,
                reply_markup=markup
            )
        except Exception as e:
            # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
            msg = bot.send_message(user_id, message_text, reply_markup=markup)
            context["mistakes_message_id"] = msg.message_id
    else:
        msg = bot.send_message(user_id, message_text, reply_markup=markup)
        context["mistakes_message_id"] = msg.message_id


@bot.callback_query_handler(func=lambda call: call.data == "mistakes_cat_close")
def close_category_mistakes(call):
    user_id = str(call.message.chat.id)
    try:
        bot.delete_message(user_id, call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    user_context.pop(user_id, None)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(
    func=lambda call: call.data.startswith("mistakes_cat_prev:") or call.data.startswith("mistakes_cat_next:"))
def paginate_category_mistakes(call):
    user_id = str(call.message.chat.id)
    parts = call.data.split(":")
    if len(parts) != 2 or not parts[1].isdigit():
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
        return
    new_page = int(parts[1])
    user_context[user_id]["page"] = new_page
    send_category_mistakes_page(user_id, new_page)
    bot.answer_callback_query(call.id)


def send_mistakes_page(user_id, page=0):
    context = user_context.get(user_id)
    if not context or "mistakes" not in context:
        bot.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—à–∏–±–æ–∫ —É—Å—Ç–∞—Ä–µ–ª–∞.")
        return

    start_idx = page * 10
    end_idx = start_idx + 10
    current_errors = context["mistakes"][start_idx:end_idx]

    total_errors = len(context["mistakes"])
    total_pages = (total_errors - 1) // 10 + 1

    message = f"üìã –ú–æ–∏ –æ—à–∏–±–∫–∏ (–í—Å–µ–≥–æ: {total_errors})\n"
    message += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
    message += "\n".join(
        f"{i + 1}. {err[0].split('‚Üê')[1]} [{err[1]}]"
        for i, err in enumerate(current_errors, start=start_idx)
    )

    markup = InlineKeyboardMarkup()

    if page > 0:
        markup.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"mistakes_prev_{page - 1}"))

    if end_idx < len(context["mistakes"]):
        markup.add(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"mistakes_next_{page + 1}"))

    markup.add(InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="mistakes_close"))

    try:
        if "message_id" in context:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=context["message_id"],
                text=message,
                reply_markup=markup
            )
        else:
            msg = bot.send_message(user_id, message, reply_markup=markup)
            user_context[user_id]["message_id"] = msg.message_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith(("mistakes_prev_", "mistakes_next_")))
def handle_mistakes_pagination(call):
    user_id = str(call.message.chat.id)

    if user_id not in user_context or "mistakes" not in user_context[user_id]:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")
        return

    parts = call.data.split("_")

    if len(parts) != 3 or not parts[2].isdigit():
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
        return

    action, page = parts[1], int(parts[2])

    if action == "prev":
        page = max(0, page)
    elif action == "next":
        page = min(len(user_context[user_id]["mistakes"]) // 10, page)

    user_context[user_id]["page"] = page
    send_mistakes_page(user_id, page)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data == "mistakes_close")
def handle_mistakes_close(call):
    user_id = str(call.message.chat.id)
    user_context.pop(user_id, None)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.answer_callback_query(call.id)


@bot.message_handler(commands=['add_word'])
def add_word(message):
    user_id = str(message.chat.id)
    categories = sorted(user_categories.get(user_id, {}).keys(), key=natural_sort_key)

    if not categories:
        bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_word –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
        return

    markup = InlineKeyboardMarkup()
    for category in categories:
        category_hash = generate_category_hash(category)
        markup.add(InlineKeyboardButton(category, callback_data=f"add_word_category:{category_hash}"))

    markup.add(InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_word_category:new"))
    msg = bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:", reply_markup=markup)

    user_context[user_id] = {
        "category_hashes": {generate_category_hash(c): c for c in categories},
        "message_id": msg.message_id
    }


@bot.callback_query_handler(func=lambda call: call.data.startswith("add_word_category:"))
def add_word_category(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    category_hash = call.data.split(":")[1]

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    if category_hash == "new":
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=ReplyKeyboardRemove())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        add_word_context[user_id] = {
            "step": "new_category",
            "category": None
        }
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ö—ç—à—É (–¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
    category_name = user_context.get(user_id, {}).get("category_hashes", {}).get(category_hash)

    if not category_name:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–û–±—ã—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"), KeyboardButton("–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"))
    bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ '{category_name}':", reply_markup=markup)

    add_word_context[user_id] = {
        "category": category_name,
        "step": "choose_mode"
    }


@bot.message_handler(
    func=lambda message: str(message.chat.id) in add_word_context and add_word_context[str(message.chat.id)].get(
        "step") == "choose_mode")
def handle_choose_add_mode(message):
    user_id = str(message.chat.id)
    mode = message.text.strip()

    if mode == "–û–±—ã—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        add_word_context[user_id]["step"] = "add_word"
        bot.send_message(user_id,
                         f"–î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{add_word_context[user_id]['category']}'. –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)\n–í–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞):")
    elif mode == "–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        add_word_context[user_id]["bulk_mode"] = True
        add_word_context[user_id]["step"] = "add_words_bulk"
        bot.send_message(user_id,
                         f"–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{add_word_context[user_id]['category']}'.\n–í–≤–æ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)\n–í–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞)\n\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ì–æ—Ç–æ–≤–æ' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /done.")


@bot.message_handler(
    func=lambda message: str(message.chat.id) in add_word_context and add_word_context[str(message.chat.id)].get(
        "bulk_mode"))
def handle_bulk_word_addition(message):
    user_id = str(message.chat.id)
    text = message.text.strip()

    # –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if text.lower() in ["–≥–æ—Ç–æ–≤–æ", "/done"]:
        bot.send_message(user_id,
                         f"‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{add_word_context[user_id]['category']}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        del add_word_context[user_id]  # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        return

    # –ë–ª–æ–∫–∏—Ä—É–µ–º "–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ" –≤ –º–∞—Å—Å–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    if text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ":
        bot.send_message(user_id,
                         "‚ùå –í—ã —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ì–æ—Ç–æ–≤–æ' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /done.")
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–æ–¥–∏–º—ã–µ —Å–ª–æ–≤–∞ –ø–æ –¥–≤–æ–π–Ω–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É —Å—Ç—Ä–æ–∫–∏ (–∫–∞–∂–¥–∞—è –ø–∞—Ä–∞ —Å–ª–æ–≤ - –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫)
    words = text.split("\n\n")
    category = add_word_context[user_id]["category"]
    added_count = 0  # –°—á–µ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤

    for word_entry in words:
        word_data = word_entry.strip().split("\n")  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –≤–≤–æ–¥–µ —Ä–æ–≤–Ω–æ 2 —Å—Ç—Ä–æ–∫–∏ (–Ω–µ–≤–µ—Ä–Ω—ã–π –∏ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
        if len(word_data) != 2:
            bot.send_message(user_id,
                             "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)\n–í–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞).")
            continue

        wrong_word, correct_word = word_data

        new_word = {
            "question": f"{wrong_word.strip()}‚Üê{correct_word.strip()}",
            "correct": correct_word.strip()
        }

        user_categories[user_id][category].append(new_word)
        added_count += 1

    if added_count > 0:
        save_json("user_categories.json", user_categories)
        bot.send_message(user_id,
                         f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —Å–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
categories_for_all_users = load_json("categories_for_all_users.json", {})
allowed_users = load_json("allowed_users.json", [])


@bot.message_handler(func=lambda message: str(message.chat.id) in add_word_context)
def handle_add_word_steps(message):
    user_id = str(message.chat.id)
    step = add_word_context[user_id].get("step")

    if message.text.strip() == "–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ":
        bot.send_message(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        del add_word_context[user_id]
        return

    if step == "new_category":
        category_name = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if contains_invalid_symbols(category_name):
            bot.send_message(user_id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ! –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if len(category_name) > 100 or has_excessive_repetition(category_name):
            bot.send_message(user_id, "–û—à–∏–±–∫–∞! –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if user_id not in user_categories:
            user_categories[user_id] = {}

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        user_categories[user_id][category_name] = []
        save_json("user_categories.json", user_categories)

        add_word_context[user_id]["category"] = category_name
        bot.send_message(
            user_id,
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —Å–æ–∑–¥–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)\n"
            "–í–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞):",
            parse_mode="HTML"
        )
        add_word_context[user_id]["step"] = "add_word"

    elif step == "add_word":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if contains_invalid_symbols(message.text):
            bot.send_message(user_id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ! –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.")
            return

        category = add_word_context[user_id]["category"]
        word_data = message.text.strip().split("\n", 1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫
        if len(word_data) != 2:
            bot.send_message(
                user_id,
                "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)\n"
                "–í–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞):",
                parse_mode="HTML"
            )
            return

        wrong_word, correct_word = word_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
        if len(wrong_word.strip()) > 50 or len(correct_word.strip()) > 50 or has_excessive_repetition(
                correct_word.strip()):
            bot.send_message(
                user_id,
                "–û—à–∏–±–∫–∞! –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ (–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π, –∏ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç—ã) –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        new_word = {
            "question": f"{wrong_word.strip()}‚Üê{correct_word.strip()}",
            "correct": correct_word.strip()
        }

        user_categories[user_id][category].append(new_word)
        save_json("user_categories.json", user_categories)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö, –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if user_id in allowed_users:
            if category not in categories_for_all_users:
                categories_for_all_users[category] = []
            categories_for_all_users[category].append(new_word)
            save_json("categories_for_all_users.json", categories_for_all_users)

        bot.send_message(
            user_id,
            f"–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}':\n–ù–µ–≤–µ—Ä–Ω—ã–π: {wrong_word}\n–í–µ—Ä–Ω—ã–π: {correct_word}"
        )
        del add_word_context[user_id]


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ —Å–ª–æ–≤
@bot.message_handler(commands=['remove_word'])
def remove_word(message):
    """–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ —Å–ª–æ–≤–æ)."""
    user_id = str(message.chat.id)
    if user_id not in user_categories or not user_categories[user_id]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="remove_category_menu"))
    markup.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="remove_word_menu"))
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "remove_category_menu")
def show_categories_for_removal(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    categories = sorted(user_categories.get(user_id, {}).keys(), key=natural_sort_key)

    if not categories:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    markup = InlineKeyboardMarkup()
    category_hash_map = {}
    for category in categories:
        category_hash = generate_category_hash(category)
        category_hash_map[category_hash] = category
        markup.add(InlineKeyboardButton(category, callback_data=f"confirm_remove_category:{category_hash}"))

    user_context[user_id] = {
        "category_hash_map": category_hash_map,
        "message_id": call.message.message_id
    }

    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_remove_category:"))
def confirm_remove_category(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    category_hash = call.data.split(":")[1]

    category_hash_map = user_context.get(user_id, {}).get("category_hash_map", {})
    category_name = category_hash_map.get(category_hash)

    if not category_name:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user_context[user_id]["delete_category"] = category_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("1"), KeyboardButton("0"))

    bot.send_message(
        user_id,
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'?\n"
        "–ù–∞–∂–º–∏—Ç–µ 1 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=markup
    )


WORDS_PER_PAGE = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ


@bot.callback_query_handler(func=lambda call: call.data == "remove_word_menu")
def show_categories_to_choose_word(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
    categories = sorted(
        user_categories.get(user_id, {}).keys(),
        key=natural_sort_key
    )

    if not categories:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤.")
        return

    markup = InlineKeyboardMarkup()
    category_hash_map = {}

    for category in categories:
        category_hash = generate_category_hash(category)
        category_hash_map[category_hash] = category
        markup.add(InlineKeyboardButton(
            category,
            callback_data=f"search_word_to_remove:{category_hash}"
        ))

    user_context[user_id] = {
        "category_hash_map": category_hash_map,
        "action": "remove_word"
    }

    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞:",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_word_to_remove:"))
def show_words_for_removal(call):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π."""
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    category_hash = call.data.split(":")[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–µ—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if user_id not in user_context or "category_hash_map" not in user_context[user_id]:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    category_name = user_context[user_id]["category_hash_map"].get(category_hash)
    if not category_name or category_name not in user_categories.get(user_id, {}):
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    words = user_categories[user_id][category_name]
    if not words:
        bot.send_message(user_id, f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à —Å–ª–æ–≤ –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    user_context[user_id]["word_list"] = words
    user_context[user_id]["current_page"] = 0
    user_context[user_id]["category_hash"] = category_hash

    send_word_list(user_id)


def send_word_list(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
    if user_id not in user_context or "word_list" not in user_context[user_id]:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∫–µ—à –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞—Ä–µ–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    words = user_context[user_id]["word_list"]
    category_hash = user_context[user_id]["category_hash"]
    page = user_context[user_id]["current_page"]

    total_pages = (len(words) - 1) // WORDS_PER_PAGE + 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    start = page * WORDS_PER_PAGE
    end = start + WORDS_PER_PAGE

    markup = InlineKeyboardMarkup()
    word_hash_map = {}

    for word in words[start:end]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        question_text = word["question"].replace("‚Üê", " / ")
        question_hash = generate_id(word["question"])
        word_hash_map[question_hash] = word["question"]
        markup.add(
            InlineKeyboardButton(question_text, callback_data=f"confirm_remove_word:{category_hash}:{question_hash}"))

    # –ö–Ω–æ–ø–∫–∏ "‚è™ –ù–∞–∑–∞–¥" –∏ "‚è© –î–∞–ª–µ–µ"
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="prev_page"))
    if end < len(words):
        nav_buttons.append(InlineKeyboardButton("‚è© –î–∞–ª–µ–µ", callback_data="next_page"))

    if nav_buttons:
        markup.row(*nav_buttons)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

    user_context[user_id]["word_hash_map"] = word_hash_map  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à —Ö—ç—à–µ–π —Å–ª–æ–≤
    bot.send_message(user_id, f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["prev_page", "next_page"])
def paginate_words(call):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤."""
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)

    if user_id not in user_context or "current_page" not in user_context[user_id]:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∫–µ—à –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞—Ä–µ–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if call.data == "prev_page":
        user_context[user_id]["current_page"] -= 1
    elif call.data == "next_page":
        user_context[user_id]["current_page"] += 1

    send_word_list(user_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤


@bot.callback_query_handler(func=lambda call: call.data.startswith("search_word_to_remove:"))
def ask_for_search_word(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º."""
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    category_hash = call.data.split(":")[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–µ—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if user_id not in user_context or "category_hash_map" not in user_context[user_id]:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    category_name = user_context[user_id]["category_hash_map"].get(category_hash)
    if not category_name or category_name not in user_categories.get(user_id, {}):
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    user_context[user_id]["category_hash"] = category_hash
    user_context[user_id]["search_mode"] = True  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞

    bot.send_message(user_id, f"üîé –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':")


@bot.message_handler(
    func=lambda message: str(message.chat.id) in user_context and user_context[str(message.chat.id)].get("search_mode"))
def search_word_to_remove(message):
    """–§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É."""
    user_id = str(message.chat.id)
    search_query = message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ö—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_hash = user_context[user_id].get("category_hash")
    if not category_hash or "category_hash_map" not in user_context[user_id]:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    category_name = user_context[user_id]["category_hash_map"].get(category_hash)
    if not category_name or category_name not in user_categories.get(user_id, {}):
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    words = user_categories[user_id][category_name]

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞
    filtered_words = [word for word in words if search_query in word["question"].lower()]

    if not filtered_words:
        bot.send_message(user_id,
                         f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö '{search_query}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    user_context[user_id]["word_list"] = filtered_words
    user_context[user_id]["current_page"] = 0
    user_context[user_id]["search_mode"] = False  # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞

    send_word_list(user_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤


@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_remove_word:"))
def confirm_remove_word(call):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞."""
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    _, category_hash, question_hash = call.data.split(":")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if user_id not in user_context or "category_hash_map" not in user_context[user_id]:
        bot.send_message(user_id, "‚ö† –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏.")
        return show_categories_to_choose_word(call)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    category_name = user_context[user_id]["category_hash_map"].get(category_hash)
    if not category_name:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return show_categories_to_choose_word(call)

    word_hash_map = user_context[user_id].get("word_hash_map", {})
    question_text = word_hash_map.get(question_hash)

    if not question_text:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return show_categories_to_choose_word(call)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    words = user_categories.get(user_id, {}).get(category_name, [])

    # –ò—â–µ–º –Ω—É–∂–Ω–æ–µ —Å–ª–æ–≤–æ
    word_to_delete = next((word for word in words if word["question"] == question_text), None)

    if not word_to_delete:
        bot.send_message(user_id, "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")
        return show_categories_to_choose_word(call)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    user_context[user_id]["delete_word"] = {
        "category": category_name,
        "word": word_to_delete
    }

    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("1"), KeyboardButton("0"))

    bot.send_message(
        user_id,
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ '{question_text.replace('‚Üê', '/')}'? –ù–∞–∂–º–∏—Ç–µ 1 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: (
        str(message.chat.id) in user_context and
        "delete_word" in user_context[str(message.chat.id)]
))
def handle_word_deletion_confirmation(message):
    user_id = str(message.chat.id)
    confirmation = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ–≤–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    delete_info = user_context.get(user_id, {}).get("delete_word")
    if not delete_info:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", reply_markup=ReplyKeyboardRemove())
        user_context.pop(user_id, None)
        return

    category = delete_info["category"]
    word_to_delete = delete_info["word"]

    if confirmation == "1":  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if category in user_categories.get(user_id, {}):
            # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            user_categories[user_id][category] = [
                word for word in user_categories[user_id][category]
                if word != word_to_delete
            ]
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—Ç–∞–ª–∞ –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º –µ—ë
            if not user_categories[user_id][category]:
                del user_categories[user_id][category]
            save_json("user_categories.json", user_categories)

            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ errors.json
            if user_id in errors and category in errors[user_id]:
                errors[user_id][category].pop(word_to_delete["question"], None)
                # –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                if not errors[user_id][category]:
                    del errors[user_id][category]
                save_json("errors.json", errors)

            bot.send_message(
                user_id,
                f"‚úÖ –°–ª–æ–≤–æ '{word_to_delete['question'].replace('‚Üê', '/')}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            bot.send_message(user_id, f"–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        user_context.pop(user_id, None)
    elif confirmation == "0":  # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
        bot.send_message(user_id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        user_context.pop(user_id, None)
    else:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ù–∞–∂–º–∏—Ç–µ 1 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


@bot.message_handler(func=lambda message: (
        str(message.chat.id) in user_context and
        "delete_category" in user_context[str(message.chat.id)]
))
def handle_category_deletion_confirmation(message):
    user_id = str(message.chat.id)
    confirmation = message.text.strip()
    category = user_context[user_id].get("delete_category")

    if not category:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", reply_markup=ReplyKeyboardRemove())
        return

    if confirmation == "1":  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if category in user_categories.get(user_id, {}):
            try:
                # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –æ—à–∏–±–∫–∞–º–∏ –∏–∑ errors.json, –µ—Å–ª–∏ —Ç–∞–∫–∞—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if user_id in errors and category in errors[user_id]:
                    del errors[user_id][category]
                    save_json("errors.json", errors)
                # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ user_categories
                del user_categories[user_id][category]
                save_json("user_categories.json", user_categories)
                bot.send_message(user_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                                 reply_markup=ReplyKeyboardRemove())
            except Exception as e:
                bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}", reply_markup=ReplyKeyboardRemove())
        else:
            bot.send_message(user_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.",
                             reply_markup=ReplyKeyboardRemove())
    elif confirmation == "0":  # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
        bot.send_message(user_id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    else:  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ù–∞–∂–º–∏—Ç–µ 1 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

    user_context.pop(user_id, None)


@bot.message_handler(func=lambda message: (
        str(message.chat.id) in user_context and
        "delete_word" in user_context[str(message.chat.id)]
))
def handle_deletion_confirmation(message):
    user_id = str(message.chat.id)
    context = user_context.get(user_id, {})
    confirmation = message.text.strip()

    if confirmation == "1":  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        delete_info = context.get("delete_word")
        if not delete_info:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
                             reply_markup=ReplyKeyboardRemove())
            user_context.pop(user_id, None)  # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            return

        category = delete_info["category"]
        question_id = delete_info["question_id"]
        word_to_delete = delete_info["word"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category not in user_categories.get(user_id, {}):
            bot.send_message(user_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.",
                             reply_markup=ReplyKeyboardRemove())
            user_context.pop(user_id, None)  # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            return

        # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        user_categories[user_id][category] = [
            word for word in user_categories[user_id][category]
            if generate_id(word["question"]) != question_id
        ]
        save_json("user_categories.json", user_categories)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        bot.send_message(
            user_id,
            f"–°–ª–æ–≤–æ '{word_to_delete['question'].replace('‚Üê', '/')}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.",
            reply_markup=ReplyKeyboardRemove()
        )

        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_context.pop(user_id, None)

    elif confirmation == "0":  # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
        bot.send_message(user_id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        user_context.pop(user_id, None)
    else:  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ù–∞–∂–º–∏—Ç–µ 1 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_category:"))
def remove_category(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    category = call.data.split(":")[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if category in user_categories.get(user_id, {}):
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞—è
        if user_id in errors:
            category_questions = {
                word["question"]
                for word in user_categories[user_id].get(category, [])
            }
            errors[user_id] = {
                question: count
                for question, count in errors[user_id].items()
                if question not in category_questions
            }
            save_json("errors.json", errors)

        # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        del user_categories[user_id][category]
        save_json("user_categories.json", user_categories)
        bot.send_message(user_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        bot.send_message(user_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@bot.message_handler(commands=['remove_word'])
def remove_word(message):
    """–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ —Å–ª–æ–≤–æ)."""
    user_id = str(message.chat.id)

    if user_id not in user_categories or not user_categories[user_id]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="remove_category_menu"))
    markup.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="remove_word_menu"))

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_word:"))
def delete_word(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    # Callback —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "delete_word:category:question_id"
    _, category, question_id = call.data.split(":", 2)
    words = user_categories[user_id].get(category, [])
    # –ò—â–µ–º —É–¥–∞–ª—è–µ–º—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ö—ç—à—É
    word_to_delete = next((word for word in words if generate_id(word["question"]) == question_id), None)
    if not word_to_delete:
        bot.send_message(user_id, "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    updated_words = [word for word in words if word != word_to_delete]
    user_categories[user_id][category] = updated_words
    save_json("user_categories.json", user_categories)
    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if user_id in errors and category in errors[user_id]:
        errors[user_id][category].pop(word_to_delete["question"], None)
        if not errors[user_id][category]:
            del errors[user_id][category]
        save_json("errors.json", errors)
    bot.send_message(user_id, f"–°–ª–æ–≤–æ '{word_to_delete['question']}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.")


# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
def send_daily_quiz():
    for user_id in user_categories:
        categories = user_categories[user_id]
        if not categories:
            continue  # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
        category_name = random.choice(list(categories.keys()))
        words = categories[category_name]
        if not words:
            continue  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞

        question_data = random.choice(words)
        question, correct_answer = question_data["question"].split("‚Üê")
        options = [question.split("‚Üê")[0], correct_answer]
        random.shuffle(options)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(KeyboardButton(options[0]), KeyboardButton(options[1]))

        bot.send_message(
            user_id,
            f"üï∞Ô∏è –í—Ä–µ–º—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã!\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
            reply_markup=markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_context:
            user_context[user_id] = {}
        user_context[user_id]["current_quiz"] = {
            "correct": correct_answer,
            "question": question,
        }


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
@bot.message_handler(
    func=lambda message: str(message.chat.id) in user_context and "current_quiz" in user_context[str(message.chat.id)]
)
def handle_quiz_answer(message):
    user_id = str(message.chat.id)
    user_answer = message.text.strip()
    quiz_data = user_context[user_id]["current_quiz"]
    correct_answer = quiz_data["correct"]
    question_text = quiz_data["question"]
    category = quiz_data["category"]

    if user_answer == correct_answer:
        bot.send_message(user_id, "‚úÖ –í–µ—Ä–Ω–æ!")
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: –µ—Å–ª–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 0 –∏–ª–∏ –º–µ–Ω—å—à–µ ‚Äì —É–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ –∏–∑ –æ—à–∏–±–æ–∫
        current_count = errors.get(user_id, {}).get(category, {}).get(question_text, 0)
        new_count = current_count - 1
        if new_count <= 0:
            if user_id in errors and category in errors[user_id]:
                errors[user_id][category].pop(question_text, None)
                if not errors[user_id][category]:
                    del errors[user_id][category]
        else:
            errors.setdefault(user_id, {}).setdefault(category, {})[question_text] = new_count
    else:
        bot.send_message(user_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}.")
        # –ü—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –æ—Ç–≤–µ—Ç–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –Ω–∞ 1
        current_count = errors.get(user_id, {}).get(category, {}).get(question_text, 0)
        new_count = current_count + 1
        errors.setdefault(user_id, {}).setdefault(category, {})[question_text] = new_count

    save_json("errors.json", errors)
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    del user_context[user_id]["current_quiz"]



# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
quiz_schedule = load_json("quiz_schedule.json", {})


# –ö–æ–º–∞–Ω–¥–∞ /quiz –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@bot.message_handler(commands=['quiz'])
def set_quiz_time(message):
    user_id = str(message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_times = quiz_schedule.get(user_id, [])
    if user_times:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è
        sorted_times = sorted(user_times, key=lambda t: list(map(int, t.split(":"))))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º—ë–Ω –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        times_list = "\n".join([f"- {time}" for time in sorted_times])
        bot.send_message(
            user_id,
            f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n{times_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, "
            "–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ 0. –í—Ä–µ–º—è –≤–≤–æ–¥–∏—Ç—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ú–°–ö+2"
        )
    else:
        bot.send_message(
            user_id,
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤—Ä–µ–º—ë–Ω. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ 0."
        )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    user_context[user_id] = {"mode": "set_quiz_time"}


import re


@bot.message_handler(func=lambda message: user_context.get(str(message.chat.id), {}).get("mode") == "set_quiz_time")
def handle_quiz_time_input(message):
    user_id = str(message.chat.id)
    time_input = message.text.strip()

    # –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if time_input == "0":
        bot.send_message(user_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        user_context.pop(user_id, None)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú)
    if not re.match(r"^([01]\d|2[0-3]):[0-5]\d$", time_input):
        bot.send_message(user_id, "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01:52).")
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if time_input in quiz_schedule.get(user_id, []):
        quiz_schedule[user_id].remove(time_input)
        save_json("quiz_schedule.json", quiz_schedule)
        bot.send_message(user_id, f"–í—Ä–µ–º—è {time_input} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        user_context.pop(user_id, None)
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    quiz_schedule.setdefault(user_id, []).append(time_input)
    save_json("quiz_schedule.json", quiz_schedule)

    bot.send_message(user_id, f"–í—Ä–µ–º—è {time_input} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
    user_context.pop(user_id, None)  # –£–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏


def send_scheduled_quizzes():
    current_time = time.strftime("%H:%M")
    for user_id, times in quiz_schedule.items():
        if current_time in times:
            # –ü–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ errors.json
            user_errors = errors.get(user_id, {})
            words_list = []
            for category, qdict in user_errors.items():
                for question, count in qdict.items():
                    words_list.append((category, question, count))
            if not words_list:
                continue

            # –í—ã–±–æ—Ä —Å–ª–æ–≤–∞ —Å —É—á—ë—Ç–æ–º –≤–µ—Å–∞ (–±–æ–ª—å—à–µ –æ—à–∏–±–æ–∫ ‚Äì –≤—ã—à–µ —à–∞–Ω—Å)
            chosen = random.choices(words_list, weights=[item[2] for item in words_list])[0]
            category_name, question_text, _ = chosen

            try:
                wrong, correct = question_text.split("‚Üê")
            except Exception:
                continue

            options = [wrong.strip(), correct.strip()]
            random.shuffle(options)
            markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(KeyboardButton(options[0]), KeyboardButton(options[1]))

            # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, —É–¥–∞–ª—è–µ–º –µ–≥–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if user_id in user_context and "last_quiz_msg_id" in user_context[user_id]:
                try:
                    bot.delete_message(user_id, user_context[user_id]["last_quiz_msg_id"])
                except Exception:
                    pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –Ω—É–∂–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            msg = bot.send_message(
                user_id,
                f"üï∞Ô∏è –í—Ä–µ–º—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã!\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
                reply_markup=markup
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_context.setdefault(user_id, {})["last_quiz_msg_id"] = msg.message_id

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_context[user_id]["current_quiz"] = {
                "correct": correct.strip(),
                "question": question_text,
                "category": category_name
            }


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º
def schedule_quiz():
    schedule.every(1).minutes.do(send_scheduled_quizzes)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    while True:
        schedule.run_pending()
        time.sleep(1)


# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=schedule_quiz, daemon=True).start()


def generate_callback_data(data):
    """–°–æ–∑–¥–∞—ë—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è callback_data."""
    return hashlib.md5(data.encode('utf-8')).hexdigest()[:8]


@bot.message_handler(commands=['start_global'])
def start_global(message):
    user_id = str(message.chat.id)
    questions = []

    # –°–±–æ—Ä –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ categories_for_all_users.json
    for category, question_list in categories_for_all_users.items():
        questions.extend(question_list)

    if not questions:
        bot.send_message(user_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–≥—Ä—ã.")
        return

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
    random.shuffle(questions)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–≥—Ä—ã
    user_context[user_id] = {
        "mode": "global_game",
        "questions": questions,
        "current": None
    }

    bot.send_message(user_id, "–ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.")
    send_global_question(user_id)


def send_global_question(user_id):
    context = user_context.get(user_id)

    if not context or not context["questions"]:
        bot.send_message(user_id, "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã!")
        user_context.pop(user_id, None)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å
    question = context["questions"].pop(0)
    context["current"] = question

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
    btn1, btn2 = question["question"].split("‚Üê")
    options = [btn1, btn2]
    random.shuffle(options)

    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton(options[0]), KeyboardButton(options[1]))

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=markup)


@bot.message_handler(func=lambda message: user_context.get(str(message.chat.id), {}).get("mode") == "global_game")
def handle_global_answer(message):
    user_id = str(message.chat.id)
    user_answer = message.text.strip()
    context = user_context[user_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    current_question = context["current"]
    correct_answer = current_question["correct"].strip()

    if user_answer == correct_answer:
        bot.send_message(user_id, "‚úÖ –í–µ—Ä–Ω–æ!")
        send_global_question(user_id)
    else:
        bot.send_message(user_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}.", reply_markup=ReplyKeyboardRemove())
        user_context.pop(user_id, None)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞


ERRORS_PER_PAGE = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ


@bot.message_handler(commands=['clean_error'])
def clean_error(message):
    user_id = str(message.chat.id)
    if user_id not in errors or not errors[user_id]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏!")
        return

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –ø—Ä–µ—Ñ–∏–∫—Å—É "‚Ññ", –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    def sort_key(category):
        match = re.search(r'‚Ññ\s*(\d+)', category)
        return int(match.group(1)) if match else float('inf')

    sorted_categories = sorted(errors[user_id].keys(), key=sort_key)

    markup = InlineKeyboardMarkup()
    for category in sorted_categories:
        markup.add(InlineKeyboardButton(category, callback_data=f"clean_cat:{category}"))
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—à–∏–±–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("clean_cat:"))
def clean_cat_handler(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    category = call.data.split(":", 1)[1]
    if user_id not in errors or category not in errors[user_id]:
        bot.send_message(user_id, "–û—à–∏–±–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏", callback_data=f"clean_all:{category}"))
    markup.add(InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –æ—à–∏–±–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", callback_data=f"clean_select:{category}"))
    markup.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="clean_cancel"))

    try:
        bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                              chat_id=user_id, message_id=call.message.message_id, reply_markup=markup)
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("clean_all:"))
def clean_all_handler(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    category = call.data.split(":", 1)[1]
    if user_id in errors and category in errors[user_id]:
        del errors[user_id][category]
        save_json("errors.json", errors)
        bot.edit_message_text(f"–í—Å–µ –æ—à–∏–±–∫–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' —É–¥–∞–ª–µ–Ω—ã.",
                              chat_id=user_id, message_id=call.message.message_id)
    else:
        bot.send_message(user_id, "–û—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("clean_select:"))
def clean_select_handler(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    category = call.data.split(":", 1)[1]
    if user_id not in errors or category not in errors[user_id]:
        bot.send_message(user_id, "–û—à–∏–±–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    markup = InlineKeyboardMarkup()
    for question, count in errors[user_id][category].items():
        # –ï—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ –µ—Å—Ç—å "‚Üê", –±–µ—Ä–µ–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
        correct_part = question.split("‚Üê")[1] if "‚Üê" in question else question
        btn_text = f"{correct_part} ({count})"
        qhash = generate_id(question)
        markup.add(InlineKeyboardButton(btn_text, callback_data=f"clean_one:{category}:{qhash}"))
    markup.add(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="clean_select_done"))
    try:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –æ—à–∏–±–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':",
                              chat_id=user_id, message_id=call.message.message_id, reply_markup=markup)
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("clean_one:"))
def clean_one_handler(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    parts = call.data.split(":")
    if len(parts) < 3:
        bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return
    category = parts[1]
    qhash = parts[2]
    if user_id not in errors or category not in errors[user_id]:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    error_found = None
    for question in list(errors[user_id][category].keys()):
        if generate_id(question) == qhash:
            error_found = question
            break

    if error_found:
        del errors[user_id][category][error_found]
        # –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –æ—à–∏–±–æ–∫, —É–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if not errors[user_id][category]:
            del errors[user_id][category]
        save_json("errors.json", errors)
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –æ—à–∏–±–∫–∞–º–∏
        markup = InlineKeyboardMarkup()
        if user_id in errors and category in errors[user_id]:
            for question, count in errors[user_id][category].items():
                correct_part = question.split("‚Üê")[1] if "‚Üê" in question else question
                btn_text = f"{correct_part} ({count})"
                qh = generate_id(question)
                markup.add(InlineKeyboardButton(btn_text, callback_data=f"clean_one:{category}:{qh}"))
        markup.add(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="clean_select_done"))
        try:
            bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –æ—à–∏–±–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':",
                                  chat_id=user_id, message_id=call.message.message_id, reply_markup=markup)
        except Exception as e:
            bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@bot.callback_query_handler(func=lambda call: call.data == "clean_select_done")
def clean_select_done_handler(call):
    user_id = str(call.message.chat.id)
    try:
        bot.edit_message_text("–û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", chat_id=user_id, message_id=call.message.message_id)
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data == "clean_cancel")
def clean_cancel_handler(call):
    user_id = str(call.message.chat.id)
    try:
        bot.edit_message_text("–û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id=user_id, message_id=call.message.message_id)
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    bot.answer_callback_query(call.id)


def send_error_list(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    if user_id not in user_context or "error_list" not in user_context[user_id]:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ —É—Å—Ç–∞—Ä–µ–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    errors_list = user_context[user_id]["error_list"]
    page = user_context[user_id]["current_page"]

    total_pages = (len(errors_list) - 1) // ERRORS_PER_PAGE + 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    start = page * ERRORS_PER_PAGE
    end = start + ERRORS_PER_PAGE

    markup = InlineKeyboardMarkup()
    error_map = {}

    for error, count in errors_list[start:end]:
        error_text = error.replace("‚Üê", "/")  # –ó–∞–º–µ–Ω—è–µ–º ‚Üê –Ω–∞ /
        error_hash = generate_hash(error)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö—ç—à –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        error_map[error_hash] = error
        markup.add(InlineKeyboardButton(f"{error_text} ({count})", callback_data=f"clean_error:{error_hash}"))

    # –ö–Ω–æ–ø–∫–∏ "‚è™ –ù–∞–∑–∞–¥" –∏ "‚è© –î–∞–ª–µ–µ"
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="prev_error_page"))
    if end < len(errors_list):
        nav_buttons.append(InlineKeyboardButton("‚è© –î–∞–ª–µ–µ", callback_data="next_error_page"))

    if nav_buttons:
        markup.row(*nav_buttons)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

    user_context[user_id]["error_map"] = error_map  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    bot.send_message(user_id, f"üìã –û—à–∏–±–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["prev_error_page", "next_error_page"])
def paginate_errors(call):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫."""
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)

    if user_id not in user_context or "current_page" not in user_context[user_id]:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∫–µ—à –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞—Ä–µ–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if call.data == "prev_error_page":
        user_context[user_id]["current_page"] -= 1
    elif call.data == "next_error_page":
        user_context[user_id]["current_page"] += 1

    send_error_list(user_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫


@bot.callback_query_handler(func=lambda call: call.data.startswith("clean_error:"))
def handle_clean_error(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö—ç—à –æ—à–∏–±–∫–∏
    error_hash = call.data.split(":", 1)[1]
    error_map = user_context.get(user_id, {}).get("error_map", {})
    error_key = error_map.get(error_hash)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—à–∏–±–∫–∞
    if not error_key or error_key not in errors.get(user_id, {}):
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
        return

    count = errors[user_id][error_key]
    bot.send_message(
        user_id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—à–∏–±–∫—É: {error_key} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}).\n"
        "–í–≤–µ–¥–∏—Ç–µ:\n"
        "- `0` –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏;\n"
        "- `—á–∏—Å–ª–æ` –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2).\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:".replace('‚Üê', '/'),
        parse_mode="Markdown"
    )
    user_context[user_id]["clean_error"] = error_key  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –æ—à–∏–±–∫—É


def generate_hash(data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"""
    return hashlib.md5(data.encode('utf-8')).hexdigest()[:8]


@bot.message_handler(
    func=lambda message: str(message.chat.id) in user_context and "clean_error" in user_context[str(message.chat.id)])
def handle_clean_error_input(message):
    user_id = str(message.chat.id)
    context = user_context[user_id]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å
    error_key = context.get("clean_error")
    if not error_key:
        bot.send_message(user_id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–±—Ä–∞—Ç—å –æ—à–∏–±–∫—É —Å –ø–æ–º–æ—â—å—é /clean_error.")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
        input_value = int(message.text.strip())
        if input_value < 0:
            raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è!")

        elif input_value == 0:
            # –£–¥–∞–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
            del errors[user_id][error_key]
            bot.send_message(user_id, f"–û—à–∏–±–∫–∞ '{error_key}' –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞.".replace('‚Üê', '/'))
        else:
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
            current_count = errors[user_id].get(error_key, 0)
            new_count = input_value
            if new_count >= current_count:
                bot.send_message(user_id, f"–ó–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è!")
            elif 0 < new_count < current_count:
                errors[user_id][error_key] = new_count
                bot.send_message(user_id,
                                 f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—à–∏–±–∫–∏ '{error_key}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_count}.".replace('‚Üê', '/'))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        save_json("errors.json", errors)

    except ValueError:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 0 –∏–ª–∏ –±–æ–ª—å—à–µ.")
    finally:
        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
        user_context[user_id].pop("clean_error", None)


# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /change_word ==========
@bot.message_handler(commands=['change_word'])
def change_word(message):
    user_id = str(message.chat.id)
    categories = sorted(user_categories.get(user_id, {}).keys(), key=natural_sort_key)

    if not categories:
        bot.send_message(user_id, "‚ö† –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return

    markup = InlineKeyboardMarkup()
    for category in categories:
        category_hash = generate_category_hash(category)
        markup.add(InlineKeyboardButton(
            f"{category}",
            callback_data=f"search_word_change:{category_hash}"
        ))

    msg = bot.send_message(user_id, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–æ–≤:", reply_markup=markup)

    user_context[user_id] = {
        "action": "change_word_init",
        "category_hash_map": {generate_category_hash(c): c for c in categories},
        "message_id": msg.message_id
    }


# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ==========
@bot.callback_query_handler(func=lambda call: call.data.startswith(SEARCH_CHANGE_PREFIX))
def handle_search_word_change(call):
    user_id = str(call.message.chat.id)
    category_hash = call.data.split(":", 1)[1]

    if user_id not in user_context or "category_hash_map" not in user_context[user_id]:
        bot.send_message(user_id, "‚ö† –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    category_name = user_context[user_id]["category_hash_map"].get(category_hash)
    if not category_name:
        bot.send_message(user_id, "‚ö† –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    user_context[user_id].update({
        "action": "search_word_change",
        "current_category": category_name,
        "category_hash": category_hash,
        "current_page": 0
    })

    bot.send_message(user_id, f"üîç –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':")
    bot.answer_callback_query(call.id)


# ========== –ü–æ–∏—Å–∫ —Å–ª–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ==========
@bot.message_handler(func=lambda message:
str(message.chat.id) in user_context and
user_context[str(message.chat.id)].get("action") == "search_word_change")
def handle_search_word_change_input(message):
    user_id = str(message.chat.id)
    search_query = message.text.strip().lower()
    context = user_context[user_id]

    category_name = context["current_category"]
    words = user_categories[user_id].get(category_name, [])

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤
    filtered_words = [
        word for word in words
        if search_query in word["question"].lower()
    ]

    if not filtered_words:
        bot.send_message(user_id, f"‚ùå –°–ª–æ–≤–∞ —Å '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        user_context.pop(user_id, None)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    context.update({
        "action": "select_word_to_edit",
        "filtered_words": filtered_words,
        "total_pages": (len(filtered_words) - 1) // WORDS_PER_PAGE + 1
    })

    send_edit_word_list(user_id)


# ========== –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ==========
def send_edit_word_list(user_id, page=0):
    context = user_context.get(user_id)
    if not context or "filtered_words" not in context:
        bot.send_message(user_id, "‚ö† –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    words = context["filtered_words"]
    start = page * WORDS_PER_PAGE
    end = start + WORDS_PER_PAGE
    current_page = page + 1

    markup = InlineKeyboardMarkup()
    for word in words[start:end]:
        question_hash = generate_id(word["question"])
        btn_text = word["question"].replace("‚Üê", " / ")[:30]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        markup.add(InlineKeyboardButton(
            f"{btn_text}",
            callback_data=f"{EDIT_WORD_PREFIX}{question_hash}"
        ))

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    if len(words) > WORDS_PER_PAGE:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"edit_prev:{page - 1}"))
        if end < len(words):
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"edit_next:{page + 1}"))
        markup.row(*nav_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_cancel"))

    bot.send_message(
        user_id,
        f"üìù –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: {len(words)}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{context['total_pages']}",
        reply_markup=markup
    )


# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ==========
@bot.callback_query_handler(func=lambda call: call.data.startswith(("edit_prev:", "edit_next:")))
def handle_edit_pagination(call):
    user_id = str(call.message.chat.id)
    action, page = call.data.split(":")
    page = int(page)

    if user_id not in user_context or "filtered_words" not in user_context[user_id]:
        bot.answer_callback_query(call.id, "‚ö† –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")
        return

    send_edit_word_list(user_id, page)
    bot.answer_callback_query(call.id)


# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞ ==========
@bot.callback_query_handler(func=lambda call: call.data.startswith(EDIT_WORD_PREFIX))
def handle_edit_word_selection(call):
    user_id = str(call.message.chat.id)
    question_hash = call.data.split(":", 1)[1]

    if user_id not in user_context or "filtered_words" not in user_context[user_id]:
        bot.answer_callback_query(call.id, "‚ö† –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")
        return

    # –ü–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    selected_word = next(
        (word for word in user_context[user_id]["filtered_words"]
         if generate_id(word["question"]) == question_hash),
        None
    )

    if not selected_word:
        bot.answer_callback_query(call.id, "‚ö† –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_context[user_id].update({
        "action": "edit_word_input",
        "selected_word": selected_word,
        "original_question": selected_word["question"]
    })

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    bot.send_message(
        user_id,
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–∞—Ä—É —Å–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)\n"
        "‚úÖ –í–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ–Ω–∞–ø–∏—Å–∞–Ω–∏–µ\n"
        "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ",
        reply_markup=ReplyKeyboardRemove()
    )
    bot.answer_callback_query(call.id)


# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ==========
@bot.message_handler(func=lambda message:
str(message.chat.id) in user_context and
user_context[str(message.chat.id)].get("action") == "edit_word_input")
def handle_edit_word_input(message):
    user_id = str(message.chat.id)
    context = user_context[user_id]

    try:
        wrong, correct = message.text.strip().split("\n", 1)
        wrong = wrong.strip()
        correct = correct.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not wrong or not correct:
            raise ValueError("–ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏")
        if len(wrong) > 50 or len(correct) > 50:
            raise ValueError("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (>50 —Å–∏–º–≤–æ–ª–æ–≤)")
        if "‚Üê" in wrong:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª ‚Üê –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–æ
        category_name = context["current_category"]
        new_question = f"{wrong}‚Üê{correct}"

        # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º –≤ user_categories
        for idx, word in enumerate(user_categories[user_id][category_name]):
            if word["question"] == context["original_question"]:
                user_categories[user_id][category_name][idx] = {
                    "question": new_question,
                    "correct": correct
                }
                break

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—à–∏–±–∫–∏
        if user_id in errors:
            if context["original_question"] in errors[user_id]:
                errors[user_id][new_question] = errors[user_id].pop(context["original_question"])

        save_json("user_categories.json", user_categories)
        save_json("errors.json", errors)

        bot.send_message(user_id, "‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

    except Exception as e:
        error_msg = {
            "ValueError": f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: {e}",
            "IndexError": "‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –î–í–ï —Å—Ç—Ä–æ–∫–∏!",
        }.get(type(e).__name__, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")

        bot.send_message(user_id, error_msg + "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    finally:
        user_context.pop(user_id, None)


# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã ==========
@bot.callback_query_handler(func=lambda call: call.data == "edit_cancel")
def handle_edit_cancel(call):
    user_id = str(call.message.chat.id)
    user_context.pop(user_id, None)
    bot.send_message(user_id, "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    bot.answer_callback_query(call.id)


# ========== –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π ==========
@bot.callback_query_handler(func=lambda call: call.data.startswith(EDIT_WORD_PREFIX))
def handle_expired_edit(call):
    bot.answer_callback_query(call.id, "‚ö† –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ", show_alert=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith("search_word_change:"))
def ask_for_search_word_change(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º."""
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    category_hash = call.data.split(":")[1]

    if user_id not in user_context or "category_hash_map" not in user_context[user_id]:
        bot.send_message(user_id, "‚ö† –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ.")
        return change_word(call.message)

    category_name = user_context[user_id]["category_hash_map"].get(category_hash)
    if not category_name:
        bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return change_word(call.message)

    user_context[user_id]["category_hash"] = category_hash
    user_context[user_id]["search_mode"] = True

    bot.send_message(user_id, f"üîé –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':")


@bot.message_handler(
    func=lambda message: str(message.chat.id) in user_context and user_context[str(message.chat.id)].get("search_mode"))
def search_word_to_change(message):
    """–§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º."""
    user_id = str(message.chat.id)
    search_query = message.text.strip().lower()

    category_hash = user_context[user_id].get("category_hash")
    if not category_hash or "category_hash_map" not in user_context[user_id]:
        bot.send_message(user_id, "‚ö† –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ.")
        return change_word(message)

    category_name = user_context[user_id]["category_hash_map"].get(category_hash)
    if not category_name or category_name not in user_categories.get(user_id, {}):
        bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return change_word(message)

    words = user_categories[user_id][category_name]
    filtered_words = [word for word in words if search_query in word["question"].lower()]

    if not filtered_words:
        bot.send_message(user_id,
                         f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö '{search_query}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user_context[user_id]["word_list"] = filtered_words
    user_context[user_id]["search_mode"] = False

    send_change_word_list(user_id)


WORDS_PER_PAGE = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ


def send_change_word_list(user_id):
    if user_id not in user_context or "word_list" not in user_context[user_id]:
        bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞: –∫–µ—à –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞—Ä–µ–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    words = user_context[user_id]["word_list"]
    category_hash = user_context[user_id]["category_hash"]

    markup = InlineKeyboardMarkup()
    word_hash_map = {}

    for word in words:
        question_text = word["question"].replace("‚Üê", " / ")
        question_hash = generate_id(word["question"])
        word_hash_map[question_hash] = word["question"]
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_word –≤–º–µ—Å—Ç–æ confirm_remove_word
        markup.add(InlineKeyboardButton(f"‚úè –ò–∑–º–µ–Ω–∏—Ç—å: {question_text}",
                                        callback_data=f"edit_word:{category_hash}:{question_hash}"))

    user_context[user_id]["word_hash_map"] = word_hash_map
    bot.send_message(user_id, "üìñ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è **–∏–∑–º–µ–Ω–µ–Ω–∏—è**:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["prev_word_page", "next_word_page"])
def paginate_words_change(call):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º."""
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)

    if user_id not in user_context or "current_page" not in user_context[user_id]:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∫–µ—à –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞—Ä–µ–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if call.data == "prev_word_page":
        user_context[user_id]["current_page"] -= 1
    elif call.data == "next_word_page":
        user_context[user_id]["current_page"] += 1

    send_change_word_list(user_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤


@bot.callback_query_handler(func=lambda call: call.data.startswith("change_category:"))
def handle_change_category(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    category = call.data.split(":")[1]
    bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':")
    user_context[user_id] = {"action": "change_category", "category": category}


@bot.callback_query_handler(func=lambda call: call.data.startswith("change_word:"))
def handle_change_word_in_category(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞."""
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    category_hash = call.data.split(":")[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if user_id not in user_context or "category_hash_map" not in user_context[user_id]:
        bot.send_message(user_id, "‚ö† –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ.", reply_markup=ReplyKeyboardRemove())
        return change_word(call.message)  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    category_name = user_context[user_id]["category_hash_map"].get(category_hash)
    if not category_name:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return change_word(call.message)

    words = user_categories[user_id].get(category_name, [])
    if not words:
        bot.send_message(user_id, f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return

    markup = InlineKeyboardMarkup()
    word_hash_map = {}

    for word in words:
        word_display = word["question"].replace('‚Üê', '/')  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        word_hash = generate_id(word["question"])  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ö—ç—à
        word_hash_map[word_hash] = word["question"]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ

        markup.add(InlineKeyboardButton(word_display, callback_data=f"edit_word:{category_hash}:{word_hash}"))

    user_context[user_id]["word_hash_map"] = word_hash_map  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—ç—à–∏ —Å–ª–æ–≤
    bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_word:"))
def handle_edit_word(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    _, category_hash, word_hash = call.data.split(":")

    if user_id not in user_context or "category_hash_map" not in user_context[user_id]:
        bot.send_message(user_id, "‚ö† –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ.")
        return change_word(call.message)

    category_name = user_context[user_id]["category_hash_map"].get(category_hash)
    if not category_name:
        bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return change_word(call.message)

    word_question = user_context[user_id]["word_hash_map"].get(word_hash)
    if not word_question:
        bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return send_change_word_list(user_id)

    bot.send_message(
        user_id,
        "‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ **—Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ**:\n"
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)\n"
        "‚úÖ –í–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞):",
        parse_mode="Markdown"
    )

    user_context[user_id] = {
        "action": "edit_word",
        "category": category_name,
        "word_hash": word_hash
    }


@bot.message_handler(
    func=lambda message: (
            str(message.chat.id) in user_context
            and user_context[str(message.chat.id)].get("action") == "edit_word"
    )
)
def handle_change_word_input(message):
    user_id = str(message.chat.id)
    context = user_context[user_id]
    action = context.get("action")

    if action == "edit_word":
        word_hash = context.get("word_hash")
        if not word_hash:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ /change_word.")
            user_context.pop(user_id, None)
            return

        new_word_data = message.text.strip().split("\n", 1)
        if len(new_word_data) != 2:
            bot.send_message(
                user_id,
                "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –≤ **—Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ**:\n"
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)\n"
                "‚úÖ –í–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞):",
                parse_mode="Markdown"
            )
            return

        category = context["category"]
        words = user_categories[user_id][category]

        word = next((w for w in words if generate_id(w["question"]) == word_hash), None)

        if word:
            old_question = word["question"]
            word["question"] = f"{new_word_data[0].strip()}‚Üê{new_word_data[1].strip()}"
            word["correct"] = new_word_data[1].strip()

            if user_id in errors and old_question in errors[user_id]:
                error_count = errors[user_id].pop(old_question)
                errors[user_id][word["question"]] = error_count
                save_json("errors.json", errors)

            save_json("user_categories.json", user_categories)
            bot.send_message(user_id, "‚úÖ **–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!**", parse_mode="Markdown")
        else:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    user_context.pop(user_id, None)


@bot.callback_query_handler(func=lambda call: True)
def handle_stale_callbacks(call):
    user_id = str(call.message.chat.id)
    if not user_context.get(user_id):
        bot.answer_callback_query(
            call.id,
            "‚ö†Ô∏è –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            show_alert=True
        )
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass


def cleanup_context():
    now = time.time()
    for user_id in list(user_context.keys()):
        if now - user_context[user_id].get("timestamp", 0) > 300:  # 5 –º–∏–Ω—É—Ç
            del user_context[user_id]


def context_cleaner():
    while True:
        cleanup_context()
        time.sleep(60)

while True:
     try:
         bot.polling(none_stop=True, timeout=60)
     except Exception as e:
         # print(f"–û—à–∏–±–∫–∞ polling: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
         time.sleep(5)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
